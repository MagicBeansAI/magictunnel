# External MCP Servers Configuration Template
# Copy this to external-mcp-servers.yaml and customize for your needs

# Process-based MCP Servers
mcpServers:
  # Filesystem operations
  # filesystem:
  #   command: "npx"
  #   args: ["-y", "@modelcontextprotocol/server-filesystem", "/tmp", "/Users"]
  #   env:
  #     PATH: "${PATH}"
  
  # Git operations
  # git:
  #   command: "uv"
  #   args: ["run", "mcp-server-git", "--repository", "."]
  #   env:
  #     PATH: "${PATH}"
  
  # Database operations
  # sqlite:
  #   command: "npx"
  #   args: ["-y", "@modelcontextprotocol/server-sqlite", "--db-path", "./data.db"]
  #   env:
  #     PATH: "${PATH}"
  
  # Web search
  # brave-search:
  #   command: "npx"
  #   args: ["-y", "@modelcontextprotocol/server-brave-search"]
  #   env:
  #     PATH: "${PATH}"
  #     BRAVE_API_KEY: "${BRAVE_API_KEY}"
  
  # GitHub integration
  # github:
  #   command: "npx"
  #   args: ["-y", "@modelcontextprotocol/server-github"]
  #   env:
  #     PATH: "${PATH}"
  #     GITHUB_PERSONAL_ACCESS_TOKEN: "${GITHUB_TOKEN}"

# OAuth-Enabled MCP Servers
# Automatic RFC 8414/9728 discovery - no manual scope configuration needed
oauthMcpServers:
  # Example: Network monitoring service with OAuth
  # globalping:
  #   enabled: true
  #   base_url: "https://mcp.globalping.dev/sse"  # MCP connection endpoint
  #   oauth_termination_here: true  # MagicTunnel handles OAuth browser flow
  #   enable_dynamic_registration:
  #     enabled: true
  #     oauth_discovery_base_url: "https://mcp.globalping.dev"  # OAuth discovery base (optional - derived from base_url if not specified)
  #     client_name: "MagicTunnel-{{hostname}}"
  #     redirect_uri_template: "http://localhost:{{port}}/auth/callback/{{server_name}}"
  #     application_type: "web"
  #     client_uri: "https://github.com/MagicBeansAI/magictunnel"
  
  # Example: Production server with static credentials
  # production_mcp:
  #   enabled: false
  #   base_url: "https://mcp.production.com"
  #   oauth_termination_here: false  # Forward OAuth to client
  #   enable_dynamic_registration:
  #     enabled: false  # Use static credentials instead
  #     # oauth_discovery_base_url not needed when using static credentials
  #   static_credentials:
  #     client_id: "${PROD_MCP_CLIENT_ID}"
  #     client_secret: "${PROD_MCP_CLIENT_SECRET}"
  #     authorization_endpoint: "https://auth.prod.com/oauth/authorize"
  #     token_endpoint: "https://auth.prod.com/oauth/token"
  #     scopes: ["read", "write"]

# Network MCP Services
httpServices:
  # Example HTTP API service
  # api_service:
  #   enabled: false
  #   base_url: "https://api.example.com/mcp"
  #   auth:
  #     type: "bearer"  # none|bearer|api_key|basic
  #     token: "${API_TOKEN}"
  #   timeout: 30

sseServices:
  # Example SSE streaming service
  # stream_service:
  #   enabled: false
  #   base_url: "https://stream.example.com/mcp/events"
  #   auth:
  #     type: "bearer"
  #     token: "${STREAM_TOKEN}"
  #   single_session: false

websocketServices: {}  # Future implementation

# Configuration Notes:
# - Use ${VAR_NAME} for environment variables
# - OAuth servers use automatic RFC discovery
# - All tools integrate into Smart Tool Discovery
