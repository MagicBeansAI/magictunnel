# MagicTunnel Configuration Template
# Copy this file to config.yaml and customize for your environment
# All settings can be overridden via environment variables
#
# IMPORTANT: Legacy mcp_proxy, mcp_servers, and remote_mcp configurations have been removed.
# Use the new external_mcp system for connecting to external MCP servers.

# =============================================================================
# DEPLOYMENT CONFIGURATION (v0.3.10)
# =============================================================================
# Multi-mode architecture configuration controls runtime behavior
deployment:
  # Runtime mode determines which services are loaded and available
  runtime_mode: "proxy"          # Runtime mode: "proxy"|"advanced" (env: MAGICTUNNEL_RUNTIME_MODE)
                                  # 
                                  # PROXY MODE (Default):
                                  # - Zero-config setup with minimal dependencies
                                  # - Fast startup and low resource usage
                                  # - Core MCP proxy functionality
                                  # - Basic web dashboard
                                  # - Smart tool discovery (if configured)
                                  #
                                  # ADVANCED MODE:
                                  # - Full enterprise features
                                  # - Security management and RBAC
                                  # - LLM services and enhancement pipeline
                                  # - Complete web dashboard
                                  # - Audit logging and monitoring
                                  # - OAuth 2.1 authentication
                                  #
                                  # Environment variable override takes precedence:
                                  # export MAGICTUNNEL_RUNTIME_MODE=advanced

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  host: "127.0.0.1"        # Server bind address (env: MCP_HOST)
  port: 3000               # Server port 1-65535 (env: MCP_PORT)
                           # Note: gRPC server automatically runs on port + 1000 (e.g., 4000)
  websocket: true          # Enable WebSocket support (env: MCP_WEBSOCKET)
  timeout: 30              # Request timeout in seconds (env: MCP_TIMEOUT)

  # TLS/SSL Configuration (Optional)
  tls:
    mode: "disabled"       # TLS mode: disabled|application|behind_proxy|auto
    cert_file: null        # Path to certificate file (PEM format)
    key_file: null         # Path to private key file (PEM format)
    ca_file: null          # Path to CA certificate file (optional)
    behind_proxy: false    # Whether running behind a reverse proxy
    trusted_proxies:       # List of trusted proxy IP ranges (CIDR notation)
      - "10.0.0.0/8"
      - "172.16.0.0/12"
      - "192.168.0.0/16"
      - "127.0.0.1/32"
    min_tls_version: "1.2" # Minimum TLS version (1.2, 1.3)
    cipher_suites: null    # Custom cipher suites (optional)
    hsts_enabled: true     # Enable HTTP Strict Transport Security (HSTS)
    hsts_max_age: 31536000 # HSTS max age in seconds (1 year)
    hsts_include_subdomains: false
    hsts_preload: false
    require_forwarded_proto: false
    require_forwarded_for: false
    auto_detect_headers:   # Auto-detection headers to check
      - "X-Forwarded-Proto"
      - "X-Forwarded-For"
      - "X-Real-IP"
    fallback_mode: "application"

# =============================================================================
# CAPABILITY REGISTRY CONFIGURATION
# =============================================================================
registry:
  type: "file"             # Registry type: "file" (env: MCP_REGISTRY_TYPE)
  paths:                   # Paths to scan for capability files (env: MCP_REGISTRY_PATHS)
    - "./capabilities"     # Default capabilities directory
                           # Note: External capabilities are auto-generated by external_mcp discovery
  hot_reload: true         # Enable file watching for changes (env: MCP_HOT_RELOAD)
  validation:
    strict: true           # Strict validation mode
    allow_unknown_fields: false
  
  # MCP 2025-06-18 Enhanced Format (Default and Only Format)
  # All tools use the Enhanced MCP 2025-06-18 format featuring:
  # - AI-Enhanced Discovery with semantic intelligence
  # - Security sandboxing (safe/restricted/privileged/dangerous/blocked)
  # - Performance monitoring and analytics
  # - Parameter intelligence with smart defaults
  # - Granular progress tracking and cancellation support



# =============================================================================
# AUTHENTICATION CONFIGURATION
# =============================================================================
# MagicTunnel supports comprehensive OAuth 2.1 multi-level authentication
# with hierarchical Server → Capability → Tool authentication resolution.
# All four authentication methods are supported: OAuth 2.1, Device Code Flow, API Keys, and Service Accounts.

# SIMPLE AUTHENTICATION EXAMPLES (uncomment to enable):
# 
# Simple API Key Authentication:
# auth:
#   enabled: true
#   type: "api_key"
#   api_keys:
#     - key_ref: "admin_key"
#       name: "Admin Key"
#       key: "your_secure_api_key_here_min_16_chars"
#       rbac_roles: ["read", "write", "admin"]
#       active: true
#       expires_at: "2025-12-31T23:59:59Z"
#     - key_ref: "readonly_key"
#       name: "Read Only Key"
#       key: "readonly_key_here_min_16_chars"
#       rbac_roles: ["read"]
#       active: true
#
# Simple OAuth Authentication:
# auth:
#   enabled: true
#   type: "oauth"
#   oauth_providers:
#     github:
#       client_id: "${GITHUB_CLIENT_ID}"
#       client_secret: "${GITHUB_CLIENT_SECRET}"
#       scopes: ["user:email"]
#       oauth_enabled: true
#       authorization_endpoint: "https://github.com/login/oauth/authorize"
#       token_endpoint: "https://github.com/login/oauth/access_token"
#       user_info_endpoint: "https://api.github.com/user"

# COMPLETE OAUTH 2.1 MULTI-LEVEL AUTHENTICATION (Advanced Configuration)
# Uncomment and customize the complete OAuth 2.1 configuration below for enterprise features:
#
# auth:
#   enabled: true
#   type: "multi_level"                    # Enable advanced multi-level authentication
#   
#   # Multi-level authentication hierarchy (Server → Capability → Tool)
#   multi_level:
#     enabled: true
#     
#     # Server-level authentication (applies to all tools unless overridden)
#     server_level:
#       type: "oauth"                      # oauth|device_code|api_key|service_account
#       provider: "github"
#       scopes: ["user:email"]
#     
#     # Capability-level authentication overrides
#     capabilities:
#       github:
#         type: "api_key"
#         key_ref: "github_api_key"
#       google:
#         type: "device_code"
#         provider: "google"
#         scopes: ["https://www.googleapis.com/auth/userinfo.email"]
#     
#     # Tool-level authentication overrides (highest priority)
#     tools:
#       github_create_issue:
#         type: "device_code"
#         provider: "github" 
#         scopes: ["repo"]
#       google_sheets_read:
#         type: "service_account"
#         account_ref: "google_service"
# 
#   # OAuth Provider Configurations (with Device Code Flow support)
#   oauth_providers:
#     github:
#       client_id: "${GITHUB_CLIENT_ID}"
#       client_secret: "${GITHUB_CLIENT_SECRET}"
#       scopes: ["user:email", "repo", "read:org"]
#       oauth_enabled: true                # Enable standard OAuth 2.1 flow
#       device_code_enabled: true          # Enable Device Code Flow (RFC 8628)
#       authorization_endpoint: "https://github.com/login/oauth/authorize"
#       device_authorization_endpoint: "https://github.com/login/device/code"
#       token_endpoint: "https://github.com/login/oauth/access_token"
#       user_info_endpoint: "https://api.github.com/user"
#       resource_indicators: 
#         - "urn:magictunnel:mcp:github:*"
#         - "https://api.github.com/*"
#       extra_params:
#         allow_signup: "false"
#         
#     google:
#       client_id: "${GOOGLE_CLIENT_ID}"
#       client_secret: "${GOOGLE_CLIENT_SECRET}"
#       scopes: ["openid", "email", "profile", "https://www.googleapis.com/auth/spreadsheets"]
#       oauth_enabled: true
#       device_code_enabled: true
#       authorization_endpoint: "https://accounts.google.com/o/oauth2/v2/auth"
#       device_authorization_endpoint: "https://oauth2.googleapis.com/device/code"
#       token_endpoint: "https://oauth2.googleapis.com/token"
#       user_info_endpoint: "https://openidconnect.googleapis.com/v1/userinfo"
#       resource_indicators:
#         - "urn:magictunnel:mcp:google:*"
#         - "https://www.googleapis.com/*"
#         
#     microsoft:
#       client_id: "${MICROSOFT_CLIENT_ID}"
#       client_secret: "${MICROSOFT_CLIENT_SECRET}"
#       scopes: ["openid", "email", "profile", "https://graph.microsoft.com/user.read"]
#       oauth_enabled: true
#       device_code_enabled: true
#       authorization_endpoint: "https://login.microsoftonline.com/common/oauth2/v2.0/authorize"
#       device_authorization_endpoint: "https://login.microsoftonline.com/common/oauth2/v2.0/devicecode"
#       token_endpoint: "https://login.microsoftonline.com/common/oauth2/v2.0/token"
#       user_info_endpoint: "https://graph.microsoft.com/v1.0/me"
#       
#     # Custom headless-only provider (Device Code Flow only)
#     custom_headless:
#       client_id: "${CUSTOM_CLIENT_ID}"
#       client_secret: "${CUSTOM_CLIENT_SECRET}"
#       scopes: ["api:read", "api:write"]
#       oauth_enabled: false               # Disable browser-based OAuth
#       device_code_enabled: true          # Only Device Code Flow
#       device_authorization_endpoint: "https://auth.custom.com/device/code"
#       token_endpoint: "https://auth.custom.com/token"
#       user_info_endpoint: "https://api.custom.com/user"
# 
#   # Device Code Flow Configuration (RFC 8628)
#   device_code_flow:
#     default_polling_interval_seconds: 5      # Default polling interval
#     max_polling_attempts: 360                # 30 minutes at 5-second intervals
#     default_timeout_seconds: 1800            # Device code expiration (30 minutes)
#     user_instruction_template: |
#       🔐 Device Authorization Required
#       
#       Go to: {verification_uri}
#       Enter code: {user_code}
#       
#       Code expires in {expires_in_minutes} minutes.
#       MagicTunnel will continue automatically once authorized.
#     enable_verification_uri_complete: true   # Use complete URI when available
#     slow_down_increment_seconds: 5           # Increase interval on slow_down response
#     retry_on_network_error: true             # Retry on network failures
#     max_network_retries: 3                   # Max network retry attempts
# 
#   # API Key Configurations (with RBAC support)
#   api_keys:
#     - key_ref: "admin_key"
#       name: "Administrator Key"
#       key: "${MAGICTUNNEL_ADMIN_API_KEY}"
#       rbac_user_id: "admin"
#       rbac_roles: ["admin", "read", "write"]
#       expires_at: "2025-12-31T23:59:59Z"
#       active: true
#       
#     - key_ref: "github_api_key"  
#       name: "GitHub Integration Key"
#       key: "${GITHUB_API_KEY}"
#       rbac_user_id: "github_integration"
#       rbac_roles: ["read", "write"]
#       active: true
#       
#     - key_ref: "readonly_key"
#       name: "Read Only Access Key"
#       key: "${MAGICTUNNEL_READONLY_API_KEY}"
#       rbac_user_id: "readonly"
#       rbac_roles: ["read"]
#       active: true
# 
#   # Service Account Configurations
#   service_accounts:
#     github_service:
#       account_type: "personal_access_token"
#       credentials: "${GITHUB_PAT}"
#       rbac_user_id: "github_service"
#       rbac_roles: ["read", "write"]
#       provider_config:
#         provider: "github"
#         api_base_url: "https://api.github.com"
#         
#     google_service:
#       account_type: "service_key"
#       credentials: "${GOOGLE_SERVICE_ACCOUNT_KEY_JSON}"
#       rbac_user_id: "google_service"  
#       rbac_roles: ["read", "write"]
#       provider_config:
#         provider: "google"
#         project_id: "${GOOGLE_PROJECT_ID}"
#         
#     custom_app_service:
#       account_type: "application_credentials"
#       credentials: "${CUSTOM_APP_CREDENTIALS}"
#       rbac_user_id: "custom_app"
#       rbac_roles: ["read"]
# 
#   # OAuth 2.1 Security Enhancements  
#   oauth_2_1:
#     enforce_pkce: true                       # Require PKCE for all OAuth flows
#     code_challenge_method: "S256"            # Only S256 supported for security
#     require_state_parameter: true           # Require state parameter
#     state_length: 32                        # Length of generated state parameter
#     code_verifier_length: 128               # PKCE code verifier length (43-128)
#     token_validation_cache_ttl: 3600        # Cache token validation for 1 hour
#     user_info_cache_ttl: 1800               # Cache user info for 30 minutes
#     token_refresh_threshold: 300             # Refresh tokens if expire in 5 minutes
#     enable_refresh_token_rotation: true     # Rotate refresh tokens for security
# 
#   # Resource Indicators Configuration (RFC 8707)
#   resource_indicators:
#     enabled: true                           # Enable Resource Indicators support
#     default_resources:
#       - "https://api.magictunnel.io/mcp"
#       - "urn:magictunnel:mcp:*"
#       - "urn:magictunnel:tools:*"
#     default_audience:
#       - "magictunnel-mcp-server"
#       - "magictunnel-tools"
#     require_explicit_resources: false      # For backward compatibility
#     wildcard_matching: true                # Support wildcard in resource URIs
#     resource_validation_strict: false      # Allow unlisted resources (for flexibility)
#     
#   # Session Management and Persistence (Legacy - replaced by session_persistence)
#   session:
#     storage_backend: "memory"              # memory|redis|file|database
#     storage_path: "./data/sessions"        # For file backend
#     redis_url: "${REDIS_URL}"             # For redis backend  
#     database_url: "${DATABASE_URL}"       # For database backend
#     session_ttl: 86400                    # Session TTL (24 hours)
#     refresh_threshold: 3600               # Refresh if expires in 1 hour
#     cleanup_interval: 3600                # Cleanup expired sessions every hour
#     enable_persistent_sessions: true      # Persist sessions across restarts
#     session_cookie_secure: true          # Require HTTPS for session cookies
#     session_cookie_same_site: "strict"   # CSRF protection
# 
#   # Session Persistence Configuration (OAuth 2.1 Phase 2)
#   # RECOMMENDED: Use this configuration for production deployments
#   session_persistence:
#     enabled: true                           # Enable OAuth 2.1 session persistence system (env: MAGICTUNNEL_SESSION_PERSISTENCE_ENABLED)
#     
#     # User Context Configuration (Phase 2.1)
#     # Provides user-specific session identification and isolation
#     user_context:
#       enabled: true                         # Enable user context identification (env: MAGICTUNNEL_USER_CONTEXT_ENABLED)
#       session_directory: "~/.magictunnel/sessions"  # Custom session directory (env: MAGICTUNNEL_CUSTOM_SESSION_DIR)
#       hostname_isolation: true              # Isolate sessions by hostname for multi-server deployments (env: MAGICTUNNEL_HOSTNAME_ISOLATION)
#       
#     # Token Storage Configuration (Phase 2.2)
#     # Multi-platform secure token storage with encryption
#     token_storage:
#       enabled: true                         # Enable secure token storage (env: MAGICTUNNEL_TOKEN_STORAGE_ENABLED)
#       storage_backend: "auto"               # auto|keychain|credential_manager|secret_service|filesystem (env: MAGICTUNNEL_TOKEN_STORAGE_BACKEND)
#                                             # auto: Automatically detect best platform storage (macOS Keychain, Windows Credential Manager, Linux Secret Service)
#                                             # keychain: Force macOS Keychain usage
#                                             # credential_manager: Force Windows Credential Manager
#                                             # secret_service: Force Linux Secret Service (D-Bus)
#                                             # filesystem: Encrypted file storage (fallback option)
#       encryption_enabled: true              # Enable AES-256-GCM encryption for filesystem storage (env: MAGICTUNNEL_TOKEN_ENCRYPTION_ENABLED)
#       file_permissions: "0600"              # File permissions for token files (env: MAGICTUNNEL_TOKEN_FILE_PERMISSIONS)
#       max_tokens_per_provider: 10           # Maximum stored tokens per provider (env: MAGICTUNNEL_MAX_TOKENS_PER_PROVIDER)
#       token_cleanup_interval_hours: 24      # Cleanup expired tokens every N hours (env: MAGICTUNNEL_TOKEN_CLEANUP_INTERVAL)
#       
#     # Session Recovery Configuration (Phase 2.3)
#     # Automatic session recovery and validation
#     session_recovery:
#       enabled: true                         # Enable automatic session recovery (env: MAGICTUNNEL_SESSION_RECOVERY_ENABLED)
#       auto_recovery_on_startup: true        # Recover sessions on application start (env: MAGICTUNNEL_SESSION_RECOVERY_STARTUP)
#       validation_interval_minutes: 60       # Validate active sessions every N minutes (env: MAGICTUNNEL_SESSION_VALIDATION_INTERVAL)
#       max_recovery_attempts: 3              # Maximum recovery attempts per token (env: MAGICTUNNEL_MAX_RECOVERY_ATTEMPTS)
#       token_validation_timeout_seconds: 30  # Timeout for token validation requests (env: MAGICTUNNEL_TOKEN_VALIDATION_TIMEOUT)
#       graceful_degradation: true            # Gracefully handle invalid/expired tokens (env: MAGICTUNNEL_GRACEFUL_DEGRADATION)
#       retry_failed_providers: true          # Retry failed providers after delay (env: MAGICTUNNEL_RETRY_FAILED_PROVIDERS)
#       
#     # Token Refresh Configuration (Phase 2.4)
#     # Automatic token refresh service with background processing
#     token_refresh:
#       enabled: true                         # Enable automatic token refresh (env: MAGICTUNNEL_TOKEN_REFRESH_ENABLED)
#       refresh_threshold_minutes: 15         # Refresh tokens when they expire in N minutes (env: MAGICTUNNEL_TOKEN_REFRESH_THRESHOLD)
#       background_refresh_enabled: true      # Enable background refresh service (env: MAGICTUNNEL_BACKGROUND_REFRESH_ENABLED)
#       max_retry_attempts: 3                 # Maximum refresh retry attempts (env: MAGICTUNNEL_REFRESH_MAX_RETRY_ATTEMPTS)
#       retry_delay_base_seconds: 5           # Base delay for exponential backoff (env: MAGICTUNNEL_REFRESH_RETRY_DELAY_BASE)
#       concurrent_refresh_limit: 5           # Maximum concurrent refresh operations (env: MAGICTUNNEL_CONCURRENT_REFRESH_LIMIT)
#       refresh_queue_size: 100               # Maximum size of refresh queue (env: MAGICTUNNEL_REFRESH_QUEUE_SIZE)
#       enable_refresh_token_rotation: true   # Enable OAuth 2.1 refresh token rotation (env: MAGICTUNNEL_REFRESH_TOKEN_ROTATION)
# 
#   # Security and Monitoring Configuration
#   security:
#     enable_url_validation: true
#     trusted_domains:
#       - "github.com"
#       - "api.github.com"
#       - "accounts.google.com"
#       - "oauth2.googleapis.com"
#       - "login.microsoftonline.com"
#       - "graph.microsoft.com"
#     blocked_domains:
#       - "malicious-site.com"
#     rate_limiting:
#       enabled: true
#       max_auth_attempts_per_minute: 10
#       max_token_requests_per_minute: 60
#       max_device_code_requests_per_minute: 5
#       lockout_duration_minutes: 15
#       enable_progressive_delay: true
#     audit_logging:
#       enabled: true
#       log_level: "info"                   # debug|info|warn|error
#       log_successful_auth: true
#       log_failed_auth: true
#       log_token_exchanges: true
#       log_device_flow_events: true
#       log_session_events: true
#       log_rbac_decisions: true
#       audit_log_file: "./logs/auth-audit.log"
#       audit_log_rotation: true
#       max_audit_log_size_mb: 100
#       
#   # Thread-Safe Caching Configuration
#   caching:
#     enabled: true
#     auth_resolution_cache_size: 1000      # Cache size for auth resolution
#     auth_resolution_cache_ttl: 300        # 5 minutes
#     provider_validation_cache_ttl: 600    # 10 minutes
#     token_validation_cache_size: 5000     # Max cached token validations
#     user_info_cache_size: 1000           # Max cached user info
#     enable_cache_metrics: true           # Track cache hit/miss rates
#     cache_cleanup_interval: 1800         # Cleanup every 30 minutes

# =============================================================================
# MCP CLIENT CONFIGURATION
# =============================================================================
# Configuration for MCP client connections (used when connecting to external MCP servers)
mcp_client:
  connect_timeout_secs: 30      # Connection timeout in seconds
  request_timeout_secs: 60      # Request timeout in seconds
  max_reconnect_attempts: 5     # Maximum reconnection attempts
  reconnect_delay_secs: 5       # Delay between reconnection attempts
  auto_reconnect: true          # Enable automatic reconnection
  protocol_version: "2025-06-18" # MCP protocol version to use
  client_name: "magictunnel"    # Client name for MCP handshake (defaults to package name)
  client_version: "0.3.4"       # Client version for MCP handshake (defaults to package version)

# =============================================================================
# EXTERNAL MCP CONFIGURATION (Claude Desktop Format)
# =============================================================================
# Enable discovery and integration of external MCP servers using Claude Desktop's
# exact configuration format for maximum compatibility.
#
# MIGRATION NOTE: The legacy mcp_proxy, mcp_servers, and remote_mcp configurations
# have been removed. Use this external_mcp system instead.
external_mcp:
  enabled: false                    # Enable external MCP discovery (env: EXTERNAL_MCP_ENABLED)
  config_file: "./external-mcp-servers.yaml"  # Path to external MCP servers config file
  capabilities_output_dir: "./capabilities/external-mcp"  # Where to generate capability files
  refresh_interval_minutes: 60      # How often to refresh capabilities (env: EXTERNAL_MCP_REFRESH_INTERVAL)

  # Container Configuration (for Docker/Podman MCP servers)
  containers:
    runtime: "docker"               # Container runtime: docker|podman (env: CONTAINER_RUNTIME)
    node_image: "node:18-alpine"    # Default Node.js image for MCP servers
    python_image: "python:3.11-alpine"  # Default Python image for MCP servers
    network_mode: "bridge"          # Container network mode
    run_args: ["--rm", "-i"]        # Additional container run arguments

  # Note: External MCP uses the global conflict_resolution configuration below

# =============================================================================
# GLOBAL CONFLICT RESOLUTION CONFIGURATION
# =============================================================================
# Configuration for resolving conflicts when tools from different sources have the same name
# This applies to conflicts between local tools and external MCP tools

conflict_resolution:
  # Strategy for resolving tool name conflicts
  # Options: local_first, proxy_first, first_found, reject, prefix
  strategy: "LocalFirst"         # Strategy: LocalFirst|ProxyFirst|FirstFound|Reject|Prefix (env: CONFLICT_RESOLUTION_STRATEGY)

  # Prefix for local tools when using prefix strategy
  local_prefix: "local"           # Prefix for local tools (env: CONFLICT_RESOLUTION_LOCAL_PREFIX)

  # Format for external/proxy tool prefixes when using prefix strategy
  # Use {server} placeholder for server name
  proxy_prefix_format: "{server}" # Format for external tool prefixes (env: CONFLICT_RESOLUTION_PROXY_PREFIX_FORMAT)

  # Whether to log conflict resolutions
  log_conflicts: true             # Log conflicts (env: CONFLICT_RESOLUTION_LOG_CONFLICTS)

  # Whether to include conflict metadata in tool definitions
  include_conflict_metadata: true # Include metadata (env: CONFLICT_RESOLUTION_INCLUDE_METADATA)

# =============================================================================
# SMART DISCOVERY CONFIGURATION
# =============================================================================
# Configuration for the Smart Tool Discovery system that provides intelligent
# tool selection based on natural language requests

smart_discovery:
  enabled: true                           # Enable smart discovery (env: SMART_DISCOVERY_ENABLED)
  tool_selection_mode: "rule_based"       # Tool selection mode: rule_based|llm_based|semantic_based|hybrid (env: SMART_DISCOVERY_MODE)
  default_confidence_threshold: 0.7       # Default confidence threshold for tool matching (env: SMART_DISCOVERY_THRESHOLD)
  max_tools_to_consider: 10               # Maximum number of tools to consider for matching (env: SMART_DISCOVERY_MAX_TOOLS)
  max_high_quality_matches: 5             # Maximum high-quality matches to collect before stopping processing (env: SMART_DISCOVERY_MAX_HIGH_QUALITY_MATCHES)
  high_quality_threshold: 0.95            # Confidence threshold for considering a match as high-quality (env: SMART_DISCOVERY_HIGH_QUALITY_THRESHOLD)
  use_fuzzy_matching: true                # Enable fuzzy matching for tool names (env: SMART_DISCOVERY_FUZZY)
  enable_sequential_mode: true            # Enable sequential mode for multi-step workflows (default: true) (env: SMART_DISCOVERY_SEQUENTIAL_MODE)

  # LLM Tool Selection Configuration (for llm_based mode)
  llm_tool_selection:
    enabled: false                        # Enable LLM-based tool selection (env: SMART_DISCOVERY_LLM_ENABLED)
    provider: "openai"                    # LLM provider: openai|anthropic|ollama (env: SMART_DISCOVERY_LLM_PROVIDER)
    model: "gpt-4o-mini"                  # Model name to use (env: SMART_DISCOVERY_LLM_MODEL)
    api_key: null                         # API key (set via api_key_env)
    api_key_env: "OPENAI_API_KEY"         # Environment variable for API key (env: SMART_DISCOVERY_LLM_API_KEY_ENV)
    base_url: null                        # Custom base URL (env: SMART_DISCOVERY_LLM_BASE_URL)
    timeout: 30                           # Request timeout in seconds (env: SMART_DISCOVERY_LLM_TIMEOUT)
    max_retries: 3                        # Maximum retries for failed requests (env: SMART_DISCOVERY_LLM_MAX_RETRIES)
    batch_size: 15                        # Batch size for processing tools (env: SMART_DISCOVERY_LLM_BATCH_SIZE)
    max_context_tokens: 4000              # Maximum context tokens to use (env: SMART_DISCOVERY_LLM_MAX_TOKENS)

  # LLM Parameter Mapping Configuration
  llm_mapper:
    enabled: true                         # Enable LLM parameter mapping (env: SMART_DISCOVERY_MAPPER_ENABLED)
    provider: "openai"                    # LLM provider: openai|anthropic|ollama (env: SMART_DISCOVERY_MAPPER_PROVIDER)
    model: "gpt-4o-mini"                  # Model name to use (env: SMART_DISCOVERY_MAPPER_MODEL)
    api_key_env: "OPENAI_API_KEY"         # Environment variable for API key (env: SMART_DISCOVERY_MAPPER_API_KEY_ENV)
    base_url: null                        # Custom base URL (env: SMART_DISCOVERY_MAPPER_BASE_URL)
    timeout: 30                           # Request timeout in seconds (env: SMART_DISCOVERY_MAPPER_TIMEOUT)
    max_retries: 3                        # Maximum retries for failed requests (env: SMART_DISCOVERY_MAPPER_MAX_RETRIES)

  # Cache Configuration
  cache:
    enabled: true                         # Enable caching (env: SMART_DISCOVERY_CACHE_ENABLED)
    max_tool_matches: 1000               # Maximum number of entries in tool matching cache
    tool_match_ttl: 3600                 # TTL for tool matching cache entries (seconds)
    max_llm_responses: 500               # Maximum number of entries in LLM response cache
    llm_response_ttl: 1800               # TTL for LLM response cache entries (seconds)
    max_registry_entries: 100            # Maximum number of entries in registry cache
    registry_ttl: 300                    # TTL for registry cache entries (seconds)

  # Fallback Configuration
  fallback:
    enabled: true                         # Enable fallback suggestions (env: SMART_DISCOVERY_FALLBACK_ENABLED)
    min_confidence_threshold: 0.3         # Minimum confidence for fallback suggestions (env: SMART_DISCOVERY_FALLBACK_MIN_CONFIDENCE)
    max_fallback_suggestions: 5           # Maximum number of fallback suggestions (env: SMART_DISCOVERY_FALLBACK_MAX_SUGGESTIONS)
    enable_fuzzy_fallback: true           # Enable fuzzy matching fallback (env: SMART_DISCOVERY_FALLBACK_FUZZY)
    enable_keyword_fallback: true         # Enable keyword-based fallback (env: SMART_DISCOVERY_FALLBACK_KEYWORDS)
    enable_category_fallback: true        # Enable category-based fallback (env: SMART_DISCOVERY_FALLBACK_CATEGORIES)
    enable_partial_match_fallback: true   # Enable partial match fallback (env: SMART_DISCOVERY_FALLBACK_PARTIAL)

  # Semantic Search Configuration
  semantic_search:
    enabled: false                        # Enable semantic search (env: SMART_DISCOVERY_SEMANTIC_ENABLED)
    model_name: "all-MiniLM-L6-v2"        # Embedding model name (env: SMART_DISCOVERY_SEMANTIC_MODEL)
    similarity_threshold: 0.7             # Minimum similarity threshold for semantic matches (env: SMART_DISCOVERY_SEMANTIC_THRESHOLD)
    max_results: 10                       # Maximum number of semantic search results (env: SMART_DISCOVERY_SEMANTIC_MAX_RESULTS)
    
    # Persistent Storage Configuration
    storage:
      embeddings_file: "./data/embeddings/tool_embeddings.bin"  # Binary file for embeddings storage
      metadata_file: "./data/embeddings/tool_metadata.json"     # JSON file for tool metadata
      hash_file: "./data/embeddings/content_hashes.json"        # JSON file for content hash validation
      backup_count: 3                     # Number of backup files to maintain
      auto_backup: true                   # Automatically backup embeddings on updates
      compression: false                  # Enable compression for storage files (not yet implemented)
    
    # Model Configuration
    model:
      cache_dir: "./data/models"          # Directory to cache downloaded models (env: SMART_DISCOVERY_SEMANTIC_CACHE_DIR)
      device: "cpu"                       # Device to use: cpu|cuda|mps (env: SMART_DISCOVERY_SEMANTIC_DEVICE)
      max_sequence_length: 512            # Maximum sequence length for embeddings
      batch_size: 32                      # Batch size for embedding generation
      normalize_embeddings: true          # Normalize embeddings to unit vectors
      
    # Performance Configuration
    performance:
      lazy_loading: true                  # Load embeddings only when needed
      embedding_cache_size: 1000          # In-memory cache size for embeddings
      parallel_processing: true           # Enable parallel embedding generation
      worker_threads: 4                   # Number of worker threads for parallel processing

# =============================================================================
# SAMPLING CONFIGURATION
# =============================================================================
# Configuration for MCP sampling capabilities - generating sample requests and responses
sampling:
  enabled: false                         # Enable sampling capabilities (env: SAMPLING_ENABLED)
  max_schema_complexity: "medium"        # Maximum schema complexity: simple|medium|complex (env: SAMPLING_MAX_SCHEMA_COMPLEXITY)
  default_timeout_seconds: 30            # Default timeout for sampling requests (env: SAMPLING_DEFAULT_TIMEOUT)
  default_sampling_strategy: "client_forwarded"  # Default sampling routing strategy

# =============================================================================
# ELICITATION CONFIGURATION
# =============================================================================
# Configuration for MCP 2025-06-18 elicitation capabilities - interactive parameter collection
# Elicitation is OPTIONAL per MCP 2025-06-18 specification and enables dynamic user input during tool execution
elicitation:
  enabled: false                         # Enable elicitation capabilities (OPTIONAL per MCP spec) (env: ELICITATION_ENABLED)
  max_schema_complexity: "medium"        # Maximum schema complexity: simple|medium|complex (env: ELICITATION_MAX_SCHEMA_COMPLEXITY)
                                         # Note: MCP spec only supports primitive types (string, number, boolean)
  default_timeout_seconds: 30            # Default timeout for elicitation requests (env: ELICITATION_DEFAULT_TIMEOUT)
  
  # Authority Management for External MCP Servers
  # When proxying external MCP servers, respect their elicitation capabilities unless explicitly overridden
  respect_external_authority: true       # Respect external MCP server elicitation authority (env: ELICITATION_RESPECT_EXTERNAL_AUTHORITY)
  allow_tool_override: true              # Allow per-tool override of elicitation authority (env: ELICITATION_ALLOW_TOOL_OVERRIDE)
  enable_hybrid_elicitation: false       # Enable local elicitation for hybrid tools (env: ELICITATION_ENABLE_HYBRID)
  
  # MCP 2025-06-18 Compliance Settings
  # Security: Elicitation must not request sensitive information (PII, credentials, etc.)
  # User Consent: Clients must provide rejection/cancellation options

# =============================================================================
# MCP 2025-06-18 ENHANCED FEATURES 
# =============================================================================
# MCP 2025-06-18 enhanced features are ENABLED BY DEFAULT and require no configuration.
# Features included:
# - Enhanced Cancellation Support with graceful timeout handling
# - Runtime Tool Validation with strict schema enforcement  
# - Security Sandboxing with "safe" default level
# - Performance Monitoring with execution tracking and health checks
# - Streamable HTTP Transport (preferred over HTTP-SSE)
# - Sampling and Elicitation services for bidirectional communication
#
# These features can be fine-tuned through individual service configurations below.

# =============================================================================
# TOOL VISIBILITY CONFIGURATION (Smart Tool Discovery)
# =============================================================================
# Configuration for managing tool visibility and Smart Tool Discovery system
# This enables hiding individual tools while keeping them available for discovery

visibility:
  # Hide individual tools when smart discovery is enabled (default: false)
  # When true, only smart_tool_discovery tool is exposed to MCP clients
  hide_individual_tools: false   # Hide individual tools (env: VISIBILITY_HIDE_INDIVIDUAL_TOOLS)

  # Only expose smart_tool_discovery tool (default: false)
  # This is the ultimate Smart Tool Discovery mode - single tool interface
  expose_smart_discovery_only: false # Smart discovery only (env: VISIBILITY_EXPOSE_SMART_DISCOVERY_ONLY)

  # Allow individual tools to override hidden setting (default: true)
  # When false, global settings take precedence over tool-level hidden flags
  allow_override: true            # Allow tool-level overrides (env: VISIBILITY_ALLOW_OVERRIDE)

  # Default hidden state for new tools (default: false)
  # When true, new tools are hidden by default and must be explicitly shown
  default_hidden: false          # Default hidden state (env: VISIBILITY_DEFAULT_HIDDEN)


# =============================================================================
# EXTERNAL MCP SERVERS (Claude Desktop Format)
# =============================================================================
# LEGACY mcp_servers, mcp_proxy, and remote_mcp configurations have been REMOVED.
# Use the external_mcp system above instead.
#
# Create separate configuration files for external MCP servers:
#
# Copy external-mcp-servers.yaml.template to external-mcp-servers.yaml
# The template includes comprehensive documentation and examples for:
# - Claude Desktop compatible configuration format
# - Process spawning (npx, uv run, docker run, etc.)
# - Environment variable configuration
# - Working directory settings
# - Real working examples for popular MCP servers
#
# Benefits of the new external_mcp approach:
# - Claude Desktop compatibility (exact same format)
# - Automatic process management and lifecycle
# - Automatic capability file generation
# - Hot-reload support for configuration changes
# - Container support (Docker/Podman)
# - Built-in conflict resolution
#
# To get started with external MCP servers:
# 1. Set external_mcp.enabled: true above
# 2. Copy external-mcp-servers.yaml.template to external-mcp-servers.yaml
# 3. Configure your MCP servers in the new file (same format as Claude Desktop)
# 4. Set required environment variables for authentication
# 5. The system will automatically spawn processes and discover capabilities
# 6. Tool conflicts are resolved automatically (local tools take precedence)
#
# IMPORTANT: External MCP servers do NOT support 'enabled' or 'hidden' flags.
# To enable/disable a server: include/exclude it from the external-mcp-servers.yaml file.
# The 'enabled' and 'hidden' flags only apply to individual tools in capability files.

# =============================================================================
# ENVIRONMENT MONITORING CONFIGURATION
# =============================================================================
# Configuration for monitoring environment variables on the dashboard
# This section defines which environment variables are tracked and displayed
# in the web dashboard for system health monitoring
environment_monitoring:
  enabled: true                         # Enable environment variable monitoring (env: ENV_MONITORING_ENABLED)
  
  # API Keys to monitor (will be masked for security)
  api_keys:
    - name: "OpenAI API Key"
      env_var: "OPENAI_API_KEY"
      description: "OpenAI API key for LLM-based tool selection and parameter mapping"
      required_for: ["smart_discovery_llm", "smart_discovery_mapper"]
      category: "llm"
    - name: "Anthropic API Key"
      env_var: "ANTHROPIC_API_KEY"
      description: "Anthropic Claude API key for LLM-based tool selection and parameter mapping"
      required_for: ["smart_discovery_llm", "smart_discovery_mapper"]
      category: "llm"
    - name: "Smart Discovery LLM API Key"
      env_var: "SMART_DISCOVERY_LLM_API_KEY"
      description: "Dedicated API key for smart discovery LLM operations"
      required_for: ["smart_discovery_llm"]
      category: "llm"
    # OAuth 2.1 Authentication Keys
    - name: "GitHub Client Secret"
      env_var: "GITHUB_CLIENT_SECRET"
      description: "GitHub OAuth client secret for authentication"
      required_for: ["oauth_2_1_github"]
      category: "oauth"
    - name: "Google Client Secret"
      env_var: "GOOGLE_CLIENT_SECRET"
      description: "Google OAuth client secret for authentication"
      required_for: ["oauth_2_1_google"]
      category: "oauth"
    - name: "Microsoft Client Secret"
      env_var: "MICROSOFT_CLIENT_SECRET"
      description: "Microsoft OAuth client secret for authentication"
      required_for: ["oauth_2_1_microsoft"]
      category: "oauth"
    # MagicTunnel Authentication Keys
    - name: "MagicTunnel Admin API Key"
      env_var: "MAGICTUNNEL_ADMIN_API_KEY"
      description: "Administrative API key for MagicTunnel management"
      required_for: ["auth_admin"]
      category: "auth"
    - name: "MagicTunnel Readonly API Key"
      env_var: "MAGICTUNNEL_READONLY_API_KEY"
      description: "Read-only API key for MagicTunnel access"
      required_for: ["auth_readonly"]
      category: "auth"
    # Service Account Keys
    - name: "GitHub Personal Access Token"
      env_var: "GITHUB_PAT"
      description: "GitHub Personal Access Token for service account authentication"
      required_for: ["github_service_account"]
      category: "service_account"
    - name: "Google Service Account Key"
      env_var: "GOOGLE_SERVICE_ACCOUNT_KEY_JSON"
      description: "Google Service Account JSON key file content"
      required_for: ["google_service_account"]
      category: "service_account"
      
  # System environment variables to monitor
  system_vars:
    # Environment Detection
    - name: "MagicTunnel Environment"
      env_var: "MAGICTUNNEL_ENV"
      description: "Current environment (development/production/staging)"
      category: "environment"
      default_value: "development"
      expected_values: ["development", "production", "staging", "test"]
    - name: "Node Environment"
      env_var: "NODE_ENV"
      description: "Node.js environment setting"
      category: "environment"
      default_value: "development"
      expected_values: ["development", "production", "staging", "test"]
    - name: "General Environment"
      env_var: "ENV"
      description: "General environment setting"
      category: "environment"
      default_value: "development"
      
    # Server Configuration
    - name: "Server Host"
      env_var: "MCP_HOST"
      description: "Server bind address override"
      category: "server"
      default_value: "0.0.0.0"
    - name: "Server Port"
      env_var: "MCP_PORT"
      description: "Server port override"
      category: "server"
      default_value: "3001"
    - name: "WebSocket Support"
      env_var: "MCP_WEBSOCKET"
      description: "Enable WebSocket support"
      category: "server"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Request Timeout"
      env_var: "MCP_TIMEOUT"
      description: "Request timeout in seconds"
      category: "server"
      default_value: "30"
      
    # External MCP Configuration
    - name: "External MCP Enabled"
      env_var: "EXTERNAL_MCP_ENABLED"
      description: "Enable external MCP server integration"
      category: "integration"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Container Runtime"
      env_var: "CONTAINER_RUNTIME"
      description: "Container runtime for external MCP servers"
      category: "integration"
      default_value: "docker"
      expected_values: ["docker", "podman"]
      
    # Smart Discovery Configuration
    - name: "Smart Discovery Enabled"
      env_var: "SMART_DISCOVERY_ENABLED"
      description: "Enable smart tool discovery system"
      category: "smart_discovery"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Smart Discovery Mode"
      env_var: "SMART_DISCOVERY_MODE"
      description: "Tool selection mode for smart discovery"
      category: "smart_discovery"
      default_value: "hybrid"
      expected_values: ["rule_based", "llm_based", "semantic_based", "hybrid"]
      
    # OAuth 2.1 Authentication Configuration
    - name: "OAuth 2.1 Authentication Enabled"
      env_var: "MAGICTUNNEL_AUTH_ENABLED"
      description: "Enable OAuth 2.1 multi-level authentication system"
      category: "oauth_auth"
      default_value: "false"
      expected_values: ["true", "false"]
    - name: "OAuth 2.1 Authentication Type"
      env_var: "MAGICTUNNEL_AUTH_TYPE"
      description: "Authentication method type"
      category: "oauth_auth"
      default_value: "api_key"
      expected_values: ["api_key", "oauth", "multi_level"]
    - name: "OAuth 2.1 Multi-Level Enabled"
      env_var: "MAGICTUNNEL_AUTH_MULTI_LEVEL_ENABLED"
      description: "Enable hierarchical multi-level authentication"
      category: "oauth_auth"
      default_value: "false"
      expected_values: ["true", "false"]
    - name: "GitHub OAuth Client ID"
      env_var: "GITHUB_CLIENT_ID"
      description: "GitHub OAuth application client ID"
      category: "oauth_providers"
      default_value: ""
    - name: "Google OAuth Client ID"
      env_var: "GOOGLE_CLIENT_ID"
      description: "Google OAuth application client ID"
      category: "oauth_providers"
      default_value: ""
    - name: "Microsoft OAuth Client ID"
      env_var: "MICROSOFT_CLIENT_ID"
      description: "Microsoft OAuth application client ID"
      category: "oauth_providers"
      default_value: ""
    - name: "OAuth PKCE Enforcement"
      env_var: "MAGICTUNNEL_OAUTH_ENFORCE_PKCE"
      description: "Enforce PKCE for all OAuth flows (OAuth 2.1 security)"
      category: "oauth_security"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "OAuth Refresh Token Rotation"
      env_var: "MAGICTUNNEL_OAUTH_REFRESH_TOKEN_ROTATION"
      description: "Enable refresh token rotation for security"
      category: "oauth_security"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Device Code Flow Timeout"
      env_var: "MAGICTUNNEL_DEVICE_CODE_TIMEOUT"
      description: "Device code expiration timeout in seconds"
      category: "device_code"
      default_value: "1800"
    - name: "Session Storage Backend"
      env_var: "MAGICTUNNEL_SESSION_STORAGE_BACKEND"
      description: "Session storage backend for OAuth sessions"
      category: "session_management"
      default_value: "memory"
      expected_values: ["memory", "redis", "file", "database"]
      
    # Session Persistence Configuration (OAuth 2.1 Phase 2)
    - name: "Session Persistence Enabled"
      env_var: "MAGICTUNNEL_SESSION_PERSISTENCE_ENABLED"
      description: "Enable OAuth 2.1 session persistence system"
      category: "session_persistence"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "User Context Enabled"
      env_var: "MAGICTUNNEL_USER_CONTEXT_ENABLED"
      description: "Enable user context identification for session isolation"
      category: "session_persistence"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Token Storage Enabled"
      env_var: "MAGICTUNNEL_TOKEN_STORAGE_ENABLED"
      description: "Enable secure token storage across sessions"
      category: "session_persistence"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Token Storage Backend"
      env_var: "MAGICTUNNEL_TOKEN_STORAGE_BACKEND"
      description: "Platform-specific secure token storage backend"
      category: "session_persistence"
      default_value: "auto"
      expected_values: ["auto", "keychain", "credential_manager", "secret_service", "filesystem"]
    - name: "Session Recovery Enabled"
      env_var: "MAGICTUNNEL_SESSION_RECOVERY_ENABLED"
      description: "Enable automatic session recovery on startup"
      category: "session_persistence"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Token Refresh Enabled"
      env_var: "MAGICTUNNEL_TOKEN_REFRESH_ENABLED"
      description: "Enable automatic token refresh service"
      category: "session_persistence"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Token Refresh Threshold"
      env_var: "MAGICTUNNEL_TOKEN_REFRESH_THRESHOLD"
      description: "Minutes before expiration to refresh tokens"
      category: "session_persistence"
      default_value: "15"
    - name: "Background Refresh Enabled"
      env_var: "MAGICTUNNEL_BACKGROUND_REFRESH_ENABLED"
      description: "Enable background token refresh service"
      category: "session_persistence"
      default_value: "true"
      expected_values: ["true", "false"]
    - name: "Refresh Token Rotation"
      env_var: "MAGICTUNNEL_REFRESH_TOKEN_ROTATION"
      description: "Enable OAuth 2.1 refresh token rotation for security"
      category: "session_persistence"
      default_value: "true"
      expected_values: ["true", "false"]
      
    # External Services Configuration
    - name: "Ollama Base URL"
      env_var: "OLLAMA_BASE_URL"
      description: "Base URL for Ollama local LLM server"
      category: "external_services"
      default_value: "http://localhost:11434"
      
    # Logging Configuration
    - name: "Log Level"
      env_var: "RUST_LOG"
      description: "Rust logging level configuration"
      category: "logging"
      default_value: "info"
      expected_values: ["trace", "debug", "info", "warn", "error"]
    - name: "MCP Log Level"
      env_var: "MCP_LOG_LEVEL"
      description: "MCP-specific log level override"
      category: "logging"
      default_value: "info"
      expected_values: ["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]
    - name: "Log Format"
      env_var: "MCP_LOG_FORMAT"
      description: "Log output format"
      category: "logging"
      default_value: "text"
      expected_values: ["json", "text"]

# =============================================================================
# ENTERPRISE SECURITY CONFIGURATION (Optional)
# =============================================================================
# Enterprise MagicTunnel security features (separate from MCP 2025-06-18 protocol security)
# security:
#   enabled: true              # Enable enterprise security features
#   policies:
#     enabled: true            # Enable organization-wide policy enforcement
#   allowlist:
#     enabled: false           # Enable tool allowlisting and access control
#   rbac:
#     enabled: false           # Enable role-based access control
#   sanitization:
#     enabled: true            # Enable request/response sanitization

# =============================================================================
# STREAMABLE HTTP TRANSPORT CONFIGURATION (MCP 2025-06-18)
# =============================================================================
# streamable_http:
#   enabled: true              # Enable streamable HTTP transport
#   endpoint: "/mcp/streamable" # Streamable HTTP endpoint
#   max_connections: 1000      # Maximum concurrent connections
#   request_timeout: 30        # Request timeout in seconds
#   keep_alive_timeout: 60     # Keep-alive timeout in seconds

# =============================================================================
# TOOL ENHANCEMENT SERVICE CONFIGURATION
# =============================================================================
# tool_enhancement:
#   enabled: true              # Enable tool enhancement service
#   cache_duration: 3600       # Cache duration in seconds
#   max_enhancements: 1000     # Maximum number of cached enhancements

# =============================================================================
# PROMPT GENERATION SERVICE CONFIGURATION
# =============================================================================
# prompt_generation:
#   enabled: true              # Enable prompt generation service
#   max_prompts: 100           # Maximum number of generated prompts
#   cache_duration: 1800       # Cache duration in seconds

# =============================================================================
# RESOURCE GENERATION SERVICE CONFIGURATION
# =============================================================================
# resource_generation:
#   enabled: true              # Enable resource generation service
#   max_resources: 100         # Maximum number of generated resources
#   cache_duration: 1800       # Cache duration in seconds

# =============================================================================
# CONTENT STORAGE SERVICE CONFIGURATION
# =============================================================================
# content_storage:
#   enabled: true              # Enable content storage service
#   storage_path: "./data/content" # Path to store content
#   max_size_mb: 100           # Maximum storage size in MB

# =============================================================================
# EXTERNAL CONTENT MANAGEMENT CONFIGURATION
# =============================================================================
# external_content:
#   enabled: true              # Enable external content management
#   cache_duration: 3600       # Cache duration in seconds
#   max_cache_size_mb: 50      # Maximum cache size in MB

# =============================================================================
# ENHANCEMENT STORAGE CONFIGURATION
# =============================================================================
# enhancement_storage:
#   enabled: true              # Enable enhancement storage
#   storage_path: "./data/enhancements" # Path to store enhancements
#   compression: true          # Enable compression for storage

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level: "info"            # Log level: debug|info|notice|warning|error|critical|alert|emergency (env: MCP_LOG_LEVEL)
  format: "text"           # Log format: json|text (env: MCP_LOG_FORMAT)
  file: null               # Optional: log to file instead of stdout

# =============================================================================
# ADVANCED CONFIGURATION OPTIONS (Optional)
# =============================================================================
# Note: The following advanced features have implementations in the codebase but are not yet
# exposed through the main configuration system. They are available for future integration:
#
# - Security Headers: Implemented in src/tls/security_headers.rs (integrated with TLS config)
# - Rate Limiting: Implemented in src/tls/rate_limiting.rs (not yet config-exposed)
# - Certificate Monitoring: Implemented in src/tls/cert_monitoring.rs (not yet config-exposed)
#
# The following features are NOT implemented and should not be configured:
# - CORS: No implementation found
# - Monitoring/Metrics: Only middleware exists, no full implementation
# - Development Settings: No implementation found
#
# If you need these features, please check the current implementation status or
# contribute to the project: https://github.com/MagicBeansAI/magictunnel

# =============================================================================
# ENVIRONMENT VARIABLE EXAMPLES
# =============================================================================
# You can override any configuration value using environment variables:
#
# # Multi-Mode Runtime Configuration (v0.3.10)
# export MAGICTUNNEL_RUNTIME_MODE="advanced"   # proxy|advanced
# export MAGICTUNNEL_CONFIG_PATH="./my-config.yaml"  # Custom config path
# export MAGICTUNNEL_SMART_DISCOVERY="true"    # Enable/disable smart discovery
#
# # Server configuration
# export MCP_HOST="0.0.0.0"
# export MCP_PORT="8080"
# export MCP_WEBSOCKET="true"
# export MCP_TIMEOUT="60"
#
# # TLS configuration
# export MCP_TLS_MODE="application"
# export MCP_TLS_CERT_FILE="/path/to/cert.pem"
# export MCP_TLS_KEY_FILE="/path/to/key.pem"
#
# # Registry configuration
# export MCP_REGISTRY_TYPE="file"
# export MCP_REGISTRY_PATHS="./capabilities,./custom-tools"
# export MCP_HOT_RELOAD="true"
#
# # Basic Authentication
# export MCP_AUTH_ENABLED="true"
# export MCP_AUTH_TYPE="api_key"  # api_key|oauth|multi_level
#
# # OAuth 2.1 Multi-Level Authentication Environment Variables
# # Multi-level authentication
# export MAGICTUNNEL_AUTH_ENABLED="true"
# export MAGICTUNNEL_AUTH_TYPE="multi_level"
# export MAGICTUNNEL_AUTH_MULTI_LEVEL_ENABLED="true"
#
# # OAuth Provider Configuration
# export GITHUB_CLIENT_ID="your-github-client-id"
# export GITHUB_CLIENT_SECRET="your-github-client-secret"
# export GITHUB_OAUTH_ENABLED="true"
# export GITHUB_DEVICE_CODE_ENABLED="true"
# export GOOGLE_CLIENT_ID="your-google-client-id"
# export GOOGLE_CLIENT_SECRET="your-google-client-secret"
# export MICROSOFT_CLIENT_ID="your-microsoft-client-id"
# export MICROSOFT_CLIENT_SECRET="your-microsoft-client-secret"
# export CUSTOM_CLIENT_ID="your-custom-client-id"
# export CUSTOM_CLIENT_SECRET="your-custom-client-secret"
#
# # Device Code Flow Configuration
# export MAGICTUNNEL_DEVICE_CODE_POLLING_INTERVAL="5"
# export MAGICTUNNEL_DEVICE_CODE_MAX_ATTEMPTS="360"
# export MAGICTUNNEL_DEVICE_CODE_TIMEOUT="1800"
# export MAGICTUNNEL_DEVICE_CODE_SLOW_DOWN_INCREMENT="5"
#
# # API Keys and Service Accounts
# export MAGICTUNNEL_ADMIN_API_KEY="your-secure-admin-key-min-16-chars"
# export GITHUB_API_KEY="your-github-api-key"
# export MAGICTUNNEL_READONLY_API_KEY="your-readonly-api-key-min-16-chars"
# export GITHUB_PAT="your-github-personal-access-token"
# export GOOGLE_SERVICE_ACCOUNT_KEY_JSON='{...}'
# export CUSTOM_APP_CREDENTIALS="your-app-credentials"
# export GOOGLE_PROJECT_ID="your-google-project-id"
#
# # OAuth 2.1 Security Configuration
# export MAGICTUNNEL_OAUTH_ENFORCE_PKCE="true"
# export MAGICTUNNEL_OAUTH_CODE_CHALLENGE_METHOD="S256"
# export MAGICTUNNEL_OAUTH_TOKEN_CACHE_TTL="3600"
# export MAGICTUNNEL_OAUTH_USER_INFO_CACHE_TTL="1800"
# export MAGICTUNNEL_OAUTH_REFRESH_TOKEN_ROTATION="true"
#
# # Resource Indicators Configuration
# export MAGICTUNNEL_RESOURCE_INDICATORS_ENABLED="true"
# export MAGICTUNNEL_REQUIRE_EXPLICIT_RESOURCES="false"
# export MAGICTUNNEL_WILDCARD_MATCHING="true"
#
# # Session Management (Legacy - replaced by Session Persistence)
# export MAGICTUNNEL_SESSION_STORAGE_BACKEND="redis"  # memory|redis|file|database
# export MAGICTUNNEL_SESSION_STORAGE_PATH="./data/sessions"
# export REDIS_URL="redis://localhost:6379"
# export DATABASE_URL="postgresql://user:pass@localhost/magictunnel"
# export MAGICTUNNEL_SESSION_TTL="86400"
# export MAGICTUNNEL_SESSION_REFRESH_THRESHOLD="3600"
# export MAGICTUNNEL_PERSISTENT_SESSIONS="true"
#
# # Session Persistence (OAuth 2.1 Phase 2) - RECOMMENDED
# export MAGICTUNNEL_SESSION_PERSISTENCE_ENABLED="true"
#
# # User Context Configuration (Phase 2.1)
# export MAGICTUNNEL_USER_CONTEXT_ENABLED="true"
# export MAGICTUNNEL_CUSTOM_SESSION_DIR="./data/sessions"
# export MAGICTUNNEL_HOSTNAME_ISOLATION="true"
#
# # Token Storage Configuration (Phase 2.2)
# export MAGICTUNNEL_TOKEN_STORAGE_ENABLED="true"
# export MAGICTUNNEL_TOKEN_STORAGE_BACKEND="keychain"  # auto|keychain|credential_manager|secret_service|filesystem
# export MAGICTUNNEL_TOKEN_ENCRYPTION_ENABLED="true"
# export MAGICTUNNEL_TOKEN_FILE_PERMISSIONS="0600"
# export MAGICTUNNEL_MAX_TOKENS_PER_PROVIDER="10"
# export MAGICTUNNEL_TOKEN_CLEANUP_INTERVAL="24"
#
# # Session Recovery Configuration (Phase 2.3)
# export MAGICTUNNEL_SESSION_RECOVERY_ENABLED="true"
# export MAGICTUNNEL_SESSION_RECOVERY_STARTUP="true"
# export MAGICTUNNEL_SESSION_VALIDATION_INTERVAL="60"
# export MAGICTUNNEL_MAX_RECOVERY_ATTEMPTS="3"
# export MAGICTUNNEL_TOKEN_VALIDATION_TIMEOUT="30"
# export MAGICTUNNEL_GRACEFUL_DEGRADATION="true"
# export MAGICTUNNEL_RETRY_FAILED_PROVIDERS="true"
#
# # Token Refresh Configuration (Phase 2.4)
# export MAGICTUNNEL_TOKEN_REFRESH_ENABLED="true"
# export MAGICTUNNEL_TOKEN_REFRESH_THRESHOLD="15"
# export MAGICTUNNEL_BACKGROUND_REFRESH_ENABLED="true"
# export MAGICTUNNEL_REFRESH_MAX_RETRY_ATTEMPTS="3"
# export MAGICTUNNEL_REFRESH_RETRY_DELAY_BASE="5"
# export MAGICTUNNEL_CONCURRENT_REFRESH_LIMIT="5"
# export MAGICTUNNEL_REFRESH_QUEUE_SIZE="100"
# export MAGICTUNNEL_REFRESH_TOKEN_ROTATION="true"
#
# # Security and Monitoring
# export MAGICTUNNEL_AUTH_URL_VALIDATION="true"
# export MAGICTUNNEL_AUTH_RATE_LIMITING="true"
# export MAGICTUNNEL_AUTH_MAX_ATTEMPTS_PER_MINUTE="10"
# export MAGICTUNNEL_AUTH_MAX_TOKEN_REQUESTS_PER_MINUTE="60"
# export MAGICTUNNEL_AUTH_LOCKOUT_DURATION="15"
# export MAGICTUNNEL_AUTH_AUDIT_LOGGING="true"
# export MAGICTUNNEL_AUTH_LOG_SUCCESSFUL="true"
# export MAGICTUNNEL_AUTH_LOG_FAILED="true"
# export MAGICTUNNEL_AUTH_LOG_DEVICE_FLOW="true"
# export MAGICTUNNEL_AUTH_LOG_TOKEN_EXCHANGES="true"
# export MAGICTUNNEL_AUTH_LOG_SESSION_EVENTS="true"
# export MAGICTUNNEL_AUTH_LOG_RBAC_DECISIONS="true"
#
# # Thread-Safe Caching
# export MAGICTUNNEL_AUTH_CACHING_ENABLED="true"
# export MAGICTUNNEL_AUTH_RESOLUTION_CACHE_SIZE="1000"
# export MAGICTUNNEL_AUTH_RESOLUTION_CACHE_TTL="300"
# export MAGICTUNNEL_TOKEN_VALIDATION_CACHE_SIZE="5000"
# export MAGICTUNNEL_USER_INFO_CACHE_SIZE="1000"
# export MAGICTUNNEL_AUTH_CACHE_CLEANUP_INTERVAL="1800"
#
# # External MCP Discovery
# export EXTERNAL_MCP_ENABLED="true"
# export EXTERNAL_MCP_CONFIG_FILE="./external-mcp-servers.yaml"
# export EXTERNAL_MCP_REFRESH_INTERVAL="60"
#
# # Tool Conflict Resolution
# export CONFLICT_RESOLUTION_STRATEGY="LocalFirst"  # LocalFirst|ProxyFirst|FirstFound|Reject|Prefix
#
# # Smart Discovery Configuration
# export SMART_DISCOVERY_ENABLED="true"
# export SMART_DISCOVERY_MODE="hybrid"  # rule_based|llm_based|semantic_based|hybrid
# export SMART_DISCOVERY_THRESHOLD="0.7"
# export SMART_DISCOVERY_LLM_ENABLED="true"
# export SMART_DISCOVERY_LLM_PROVIDER="openai"  # openai|anthropic|ollama
# export SMART_DISCOVERY_LLM_MODEL="gpt-4o-mini"
# export SMART_DISCOVERY_LLM_API_KEY="your-api-key-here"
# export SMART_DISCOVERY_MAPPER_ENABLED="true"
# export SMART_DISCOVERY_SEMANTIC_ENABLED="true"
# export MAGICTUNNEL_SEMANTIC_MODEL="ollama:nomic-embed-text"
# export OPENAI_API_KEY="your-openai-api-key"  # For LLM parameter mapping
# export OLLAMA_BASE_URL="http://localhost:11434"  # For Ollama embedding
#
# # Sampling Configuration
# export SAMPLING_ENABLED="false"
# export SAMPLING_MAX_SCHEMA_COMPLEXITY="medium"  # simple|medium|complex
# export SAMPLING_DEFAULT_TIMEOUT="30"
#
# # Elicitation Configuration
# export ELICITATION_ENABLED="false"
# export ELICITATION_MAX_SCHEMA_COMPLEXITY="medium"  # simple|medium|complex
# export ELICITATION_DEFAULT_TIMEOUT="30"
# export ELICITATION_RESPECT_EXTERNAL_AUTHORITY="true"
# export ELICITATION_ALLOW_TOOL_OVERRIDE="true"
# export ELICITATION_ENABLE_HYBRID="false"
#
# # Tool Visibility
# export VISIBILITY_HIDE_INDIVIDUAL_TOOLS="false"
# export VISIBILITY_EXPOSE_SMART_DISCOVERY_ONLY="false" 
# export VISIBILITY_DEFAULT_HIDDEN="false"
#
# # Logging
# export MCP_LOG_LEVEL="debug"
# export MCP_LOG_FORMAT="json"
# export RUST_LOG="debug"

# =============================================================================
# QUICK START EXAMPLES
# =============================================================================
#
# 1. Basic setup (local tools only):
#    - Copy this file to config.yaml
#    - Ensure ./capabilities directory exists with your tool definitions
#    - Run: cargo run --release
#
# 2. With authentication:
#    - Uncomment the auth section above
#    - Set your API keys, OAuth, or JWT credentials
#    - Restart the proxy
#
# 3. With external MCP servers (RECOMMENDED):
#    - Set external_mcp.enabled: true
#    - Copy external-mcp-servers.yaml.template to external-mcp-servers.yaml
#    - Configure your MCP servers and set environment variables
#    - Restart the proxy to enable automatic capability discovery
#

#
# 4. Production deployment with OAuth 2.1:
#    - Enable TLS with proper certificates
#    - Configure OAuth 2.1 multi-level authentication
#    - Set up monitoring and logging with audit trails
#    - Use environment variables for all secrets
#    - Enable rate limiting and security headers
#    - Configure session persistence and Redis caching
#    - Set up Device Code Flow for headless environments
#    - Configure RBAC roles and service accounts

# =============================================================================
# CAPABILITY FILE EXAMPLES
# =============================================================================
#
# Create YAML files in ./capabilities/ directory with your tool definitions:
#
# ENHANCED MCP 2025-06-18 FORMAT EXAMPLE: ./capabilities/weather.yaml
# ---
# enhanced_tools:
#   - name: "get_weather"
#     core:
#       description: "AI-enhanced weather service with MCP 2025-06-18 compliance"
#       input_schema:
#         type: "object"
#         properties:
#           location:
#             type: "string"
#             description: "City name, coordinates, or airport code"
#             examples: ["New York", "40.7128,-74.0060", "JFK"]
#           units:
#             type: "string"
#             enum: ["metric", "imperial", "kelvin"]
#             default: "metric"
#             description: "Temperature units"
#         required: ["location"]
#     
#     # AI-Enhanced Discovery Configuration
#     discovery:
#       semantic_tags: ["weather", "temperature", "forecast", "climate", "conditions"]
#       keywords: ["weather", "temperature", "rain", "snow", "forecast", "climate"]
#       categories: ["weather", "environment", "information"]
#       ai_description: "Comprehensive weather information service with location intelligence"
#       complexity_score: 0.3
#       confidence_boost: 0.1
#       
#     # Security Sandboxing Configuration
#     security:
#       classification: "safe"      # safe|restricted|privileged|dangerous|blocked
#       requires_approval: false
#       audit_trail: true
#       allowed_environments: ["development", "staging", "production"]
#       risk_factors: ["external_api"]
#       
#     # Execution Configuration
#     execution:
#       timeout_seconds: 30
#       retry_policy:
#         max_attempts: 3
#         backoff_strategy: "exponential"
#         initial_delay_ms: 1000
#       rate_limiting:
#         max_calls_per_minute: 60
#         burst_limit: 10
#       caching:
#         enabled: true
#         ttl_seconds: 300
#         vary_by: ["location", "units"]
#         
#     # Performance Monitoring
#     monitoring:
#       track_execution: true
#       collect_metrics: true
#       health_check_enabled: true
#       sla_target_ms: 2000
#       error_threshold: 0.05
#       
#     # Parameter Intelligence
#     parameters:
#       location:
#         smart_defaults: true
#         validation_rules: ["non_empty", "max_length:100"]
#         auto_complete: true
#         normalization: "trim_whitespace"
#       units:
#         smart_defaults: true
#         user_preference_key: "weather_units"
#         
#     # Enterprise Integration
#     enterprise:
#       cost_center: "weather_services"
#       business_impact: "low"
#       compliance_tags: ["data_privacy", "gdpr"]
#       
#     # Tool Routing (same as legacy format)
#     routing:
#       type: "rest"
#       url: "https://api.weather.com/v1/current"
#       method: "GET"
#       headers:
#         "X-API-Key": "${WEATHER_API_KEY}"
#         "User-Agent": "MagicTunnel/2025.06.18"
#       query_params:
#         q: "${location}"
#         units: "${units}"
#     
#     # Visibility (supports both formats)
#     hidden: false
#
# Tool Visibility Management:
# - Use the magictunnel-visibility CLI to manage tool visibility:
#   - magictunnel-visibility status                    # Show visibility status
#   - magictunnel-visibility hide-tool get_weather     # Hide specific tool
#   - magictunnel-visibility show-tool get_weather     # Show specific tool
#   - magictunnel-visibility hide-file weather.yaml --confirm  # Hide all tools in file
#   - magictunnel-visibility show-all --confirm        # Show all tools globally
#
# Elicitation Authority Override (MCP 2025-06-18):
# - For external MCP tools, you can override elicitation authority with annotations:
#   annotations:
#     override_elicitation_authority: "true"  # Force local elicitation even if external server has elicitation capability
#     has_elicitation_capability: "true"      # Indicate external tool has elicitation capability (auto-detected)
#     has_sampling_capability: "true"         # Indicate external tool has sampling capability (auto-detected)
#
# API-to-Tool Generation (Always Enhanced Format):
# - Generate tools from APIs using CLI generators (always produces enhanced format):
#   - cargo run --bin graphql_generator -- --schema schema.graphql --endpoint https://api.example.com/graphql --output weather-graphql.yaml
#   - cargo run --bin grpc_generator -- --proto weather.proto --endpoint localhost:50051 --output weather-grpc.yaml
#   - cargo run --bin magictunnel-cli openapi --spec openapi.yaml --output weather-openapi.yaml
#   - cargo run --bin magictunnel-cli merge --input dir1/ dir2/ --output merged.yaml

# =============================================================================
# SESSION PERSISTENCE CONFIGURATION GUIDE (OAuth 2.1 Phase 2)
# =============================================================================
#
# OAuth 2.1 Phase 2: Session Persistence provides comprehensive token management
# and session recovery capabilities for enterprise OAuth deployments.
#
# DEPLOYMENT RECOMMENDATIONS:
#
# 1. Development Environment:
#    - Use filesystem storage with encryption for simplicity
#    - Enable auto-recovery for seamless development experience
#    - Set session_directory to project-local path
#
# 2. Production Environment:
#    - Use platform-native storage (keychain/credential_manager/secret_service)
#    - Enable hostname isolation for multi-server deployments
#    - Configure background refresh service for optimal performance
#    - Set up proper monitoring and validation intervals
#
# 3. Enterprise Environment:
#    - Enable all session persistence features
#    - Configure proper token cleanup and rotation policies
#    - Set up comprehensive audit logging
#    - Use proper file permissions and encryption
#
# STORAGE BACKEND SELECTION:
#
# auto (Recommended):
#   - Automatically selects best platform storage
#   - macOS: Uses Keychain Services for secure storage
#   - Windows: Uses Credential Manager for system integration
#   - Linux: Uses Secret Service (D-Bus) for desktop integration
#   - Fallback: Uses encrypted filesystem storage
#
# keychain:
#   - Forces macOS Keychain usage (macOS only)
#   - Provides system-level security and access control
#   - Integrates with macOS security policies
#
# credential_manager:
#   - Forces Windows Credential Manager usage (Windows only)
#   - Provides Windows Hello and system integration
#   - Supports domain authentication policies
#
# secret_service:
#   - Forces Linux Secret Service usage (Linux with D-Bus)
#   - Provides desktop environment integration
#   - Supports GNOME Keyring and KDE Wallet
#
# filesystem:
#   - Uses AES-256-GCM encrypted file storage
#   - Platform-independent fallback option
#   - Suitable for containerized deployments
#
# TROUBLESHOOTING SESSION PERSISTENCE:
#
# 1. Token Storage Issues:
#    - Check platform support for selected storage backend
#    - Verify file permissions (0600) for filesystem storage
#    - Ensure encryption keys are properly generated
#    - Check system keychain/credential manager access
#
# 2. Session Recovery Problems:
#    - Verify network connectivity to OAuth providers
#    - Check token validation timeout settings
#    - Review graceful degradation configuration
#    - Examine recovery attempt limits and backoff settings
#
# 3. Token Refresh Failures:
#    - Verify refresh token rotation is supported by provider
#    - Check refresh threshold and background service settings
#    - Review concurrent refresh limits and queue size
#    - Examine retry policies and exponential backoff
#
# 4. User Context Issues:
#    - Check session directory permissions and accessibility
#    - Verify hostname isolation settings for multi-server setups
#    - Review user context identification logic
#    - Examine session isolation between different users/hosts
#
# SECURITY CONSIDERATIONS:
#
# - Tokens are encrypted at rest using AES-256-GCM (filesystem backend)
# - Platform-native storage uses system security policies
# - File permissions are strictly enforced (0600 for token files)
# - Expired tokens are automatically cleaned up
# - Token rotation is supported per OAuth 2.1 specification
# - Session isolation prevents cross-user token access
# - Graceful degradation handles security policy violations
#
# PERFORMANCE OPTIMIZATION:
#
# - Background refresh service reduces request latency
# - Concurrent refresh limits prevent resource exhaustion
# - Token validation caching reduces provider API calls
# - Session validation intervals balance security and performance
# - Queue-based refresh processing handles high-load scenarios
# - Exponential backoff prevents provider rate limiting
#
# MONITORING AND OBSERVABILITY:
#
# - Session persistence events are logged with appropriate levels
# - Token refresh operations include timing and success metrics
# - Recovery attempts are tracked with detailed error information
# - Storage backend health is monitored and reported
# - Cache hit/miss rates are available for performance tuning
# - Provider-specific metrics support troubleshooting
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Common issues and solutions:
#
# 1. "Permission denied" errors:
#    - Check file permissions on capability directories
#    - Ensure the user has read access to config files
#    - Verify TLS certificate file permissions
#
# 2. "Connection refused" to external MCP servers:
#    - Verify MCP server processes can be spawned correctly
#    - Check that required commands (npx, uv, docker) are available
#    - Ensure MCP server packages are installed
#    - Verify environment variables are set correctly
#    - Check that external_mcp.enabled is set to true
#
# 3. "No capabilities loaded":
#    - Check that capability files exist in configured paths
#    - Verify YAML syntax in capability files
#    - Enable debug logging to see detailed error messages
#    - Check registry validation settings
#
# 4. Authentication failures:
#    - Verify API keys are correct and have minimum 16 characters
#    - Check OAuth configuration and credentials
#    - Ensure JWT secrets are at least 32 characters long
#    - Verify authentication is enabled in config
#
# 5. External MCP discovery issues:
#    - Check external MCP server configuration files exist
#    - Verify MCP server commands are available (npx, uv, docker)
#    - Check environment variables and working directory settings
#    - Enable debug logging for detailed discovery information
#
# 6. Tool conflicts between local and external sources:
#    - Review external_mcp.conflict_resolution strategy settings
#    - Check tool name prefixes and mappings in external MCP config
#    - Enable debug logging for conflict resolution details
#
# 7. TLS/SSL issues:
#    - Verify certificate and key file paths
#    - Check certificate validity and expiration
#    - Ensure proper TLS mode configuration
#    - Verify trusted proxy settings if behind reverse proxy
#
# 8. Session Persistence issues (OAuth 2.1 Phase 2):
#    - Check platform support for selected token storage backend
#    - Verify session directory permissions and accessibility
#    - Ensure network connectivity to OAuth providers for token validation
#    - Check token refresh settings and provider compatibility
#    - Review session recovery attempt limits and backoff configuration
#    - Verify hostname isolation settings for multi-server deployments
#    - Check file permissions (0600) for filesystem token storage
#    - Ensure proper encryption key generation for filesystem backend
#    - Review background refresh service configuration and queue limits
#    - Check token validation timeout and graceful degradation settings
#
# For more help, see: https://github.com/MagicBeansAI/magictunnel/docs
