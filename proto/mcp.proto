syntax = "proto3";

package mcp;

// MCP gRPC Service Definition
service McpService {
    // List available tools
    rpc ListTools(ListToolsRequest) returns (ListToolsResponse);
    
    // Call a tool with streaming response
    rpc CallTool(CallToolRequest) returns (stream CallToolResponse);
    
    // Bidirectional streaming for real-time communication
    rpc StreamMcp(stream McpMessage) returns (stream McpMessage);
}

// Request to list available tools
message ListToolsRequest {
    // Optional filter by tool name pattern
    optional string name_pattern = 1;
    
    // Optional filter by routing type
    optional string routing_type = 2;
}

// Response containing list of tools
message ListToolsResponse {
    repeated Tool tools = 1;
}

// Tool definition
message Tool {
    string name = 1;
    string description = 2;
    string input_schema = 3; // JSON Schema as string
    optional ToolAnnotations annotations = 4;
}

// Tool annotations for metadata
message ToolAnnotations {
    optional string title = 1;
    optional bool read_only = 2;
    optional bool destructive = 3;
    optional bool idempotent = 4;
    optional bool open_world = 5;
}

// Request to call a tool
message CallToolRequest {
    string name = 1;
    string arguments = 2; // JSON arguments as string
}

// Response from tool call (streaming)
message CallToolResponse {
    oneof response_type {
        ToolProgress progress = 1;
        ToolResult result = 2;
        ToolError error = 3;
    }
}

// Progress update during tool execution
message ToolProgress {
    double progress = 1; // 0.0 to 1.0
    string message = 2;
    int64 timestamp = 3;
}

// Final tool result
message ToolResult {
    bool success = 1;
    optional string data = 2; // JSON data as string
    optional string error = 3;
    optional string metadata = 4; // JSON metadata as string
}

// Tool execution error
message ToolError {
    string code = 1;
    string message = 2;
    optional string details = 3; // JSON details as string
}

// Generic MCP message for bidirectional streaming
message McpMessage {
    string id = 1;
    oneof message_type {
        ListToolsRequest list_tools = 2;
        ListToolsResponse tools_response = 3;
        CallToolRequest call_tool = 4;
        CallToolResponse tool_response = 5;
        HeartbeatMessage heartbeat = 6;
    }
}

// Heartbeat message for connection health
message HeartbeatMessage {
    int64 timestamp = 1;
    int32 count = 2;
}
