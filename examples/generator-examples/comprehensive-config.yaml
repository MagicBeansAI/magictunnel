# Comprehensive Generator Configuration Example (YAML Format)
# This file demonstrates all available configuration options for the unified capability generator
# in a clean, readable YAML format that's consistent with the main MCP Proxy configuration.

# Global settings that apply to all generators
global:
  # Default prefix for all tool names (can be overridden per generator)
  tool_prefix: "unified"
  # Base directory for output files
  output_dir: "./capabilities"
  # Default authentication settings (can be overridden per generator)
  default_auth:
    auth_type: "none"

# Output file settings
output:
  # Output format (yaml or json)
  format: "yaml"
  # Enable pretty-printing for better readability
  pretty: true
  # Custom file naming pattern
  # Available variables: {name}, {type}, {ext}
  file_pattern: "{type}-{name}.{ext}"

# GraphQL generator configuration
graphql:
  # Override global settings for GraphQL
  tool_prefix: "gql"
  
  # GraphQL endpoint configuration
  endpoint: "https://api.github.com/graphql"
  
  # Authentication for GraphQL endpoint
  auth:
    auth_type:
      Bearer: "your_github_token"
    headers:
      User-Agent: "magictunnel-Generator"
  
  # Query and mutation handling
  separate_mutation_query: true
  include_deprecated: false
  include_descriptions: true
  
  # Schema introspection settings
  introspection_enabled: true
  max_depth: 10

# gRPC generator configuration
grpc:
  # Override global settings for gRPC
  tool_prefix: "grpc"
  
  # gRPC service configuration
  server_address: "localhost:50051"
  
  # Authentication for gRPC service
  auth:
    auth_type: "none"
    # For TLS:
    # tls_enabled: true
    # cert_file: "path/to/cert.pem"
  
  # Streaming strategy configuration
  server_streaming_strategy: "polling"
  client_streaming_strategy: "agent-level"
  bidirectional_streaming_strategy: "pagination"
  
  # Method options
  include_method_options: true
  separate_streaming_tools: false

# OpenAPI generator configuration
openapi:
  # Override global settings for OpenAPI
  tool_prefix: "api"
  
  # API base URL
  base_url: "https://api.example.com"
  
  # Authentication configuration
  auth:
    auth_type:
      ApiKey:
        key: "your_api_key"
        header: "X-API-Key"
    headers:
      X-API-Version: "v1"
      Accept: "application/json"
  
  # Tool generation settings
  naming_convention: "operation-id"
  methods:
    - "GET"
    - "POST"
    - "PUT"
    - "PATCH"
    - "DELETE"
  
  # Advanced features
  include_deprecated: false
  enable_schema_validation: true
  enable_inheritance_patterns: true
  enable_ref_resolution: true

# Merge configuration (for combining multiple capability files)
merge:
  # Input files to merge (can be generated by the above generators)
  input_files:
    - "./capabilities/gql-github.yaml"
    - "./capabilities/grpc-user-service.yaml"
    - "./capabilities/api-petstore.yaml"
  
  # Output file for merged capabilities
  output_file: "./capabilities/merged/all-capabilities.yaml"
  
  # Merge strategy for handling duplicate tool names
  # Options: keep-first, keep-last, rename, error
  strategy: "rename"
  
  # Source mapping for renamed tools
  source_mapping:
    gql-github: "github"
    grpc-user-service: "users"
    api-petstore: "petstore"
  
  # Prefix format for renamed tools (when strategy = "rename")
  prefix_format: "{source}_{name}"

# Validation configuration
validation:
  # Enable strict validation of generated capability files
  strict: true
  # Validate against MCP specification
  mcp_compliance: true
  # Check for duplicate tool names
  check_duplicates: true
  # Validate tool schemas
  validate_schemas: true

# Usage Examples:
#
# 1. Generate GitHub GraphQL capabilities:
#    mcp-generator graphql --config comprehensive-config.yaml --schema github.graphql
#
# 2. Generate gRPC capabilities:
#    mcp-generator grpc --config comprehensive-config.yaml --proto user_service.proto
#
# 3. Generate OpenAPI capabilities:
#    mcp-generator openapi --config comprehensive-config.yaml --spec petstore.json
#
# 4. Merge all generated files:
#    mcp-generator merge --config comprehensive-config.yaml
#
# 5. Validate merged capabilities:
#    mcp-generator validate --input ./capabilities/merged/all-capabilities.yaml --strict
