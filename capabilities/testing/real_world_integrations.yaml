# Real-World Integration Examples
# This demonstrates practical, real-world use cases for the agent routing system
# with actual services and realistic scenarios

metadata:
  name: "Real-World Integration Examples"
  description: "Practical examples of agent routing for real-world integrations"
  version: "1.0.0"
  author: "MCP Proxy Team"
  tags: ["integration", "real-world", "production", "examples", "practical"]

tools:
  # ===== DEVOPS AND CI/CD INTEGRATIONS =====
  
  - name: "docker_container_manager"
    description: "Manage Docker containers with comprehensive operations"
    inputSchema:
      type: "object"
      properties:
        action:
          type: "string"
          description: "Docker action to perform"
          enum: ["list", "start", "stop", "restart", "logs", "inspect", "stats"]
          default: "list"
        container_name:
          type: "string"
          description: "Container name or ID (required for specific actions)"
        image_name:
          type: "string"
          description: "Docker image name (for start action)"
        port_mapping:
          type: "string"
          description: "Port mapping (e.g., '8080:80')"
        environment_vars:
          type: "object"
          description: "Environment variables"
          additionalProperties:
            type: "string"
        follow_logs:
          type: "boolean"
          description: "Follow logs in real-time"
          default: false
      required: ["action"]
    routing:
      type: "subprocess"
      config:
        command: "docker"
        args: [
          "{{action}}",
          "{{#if container_name}}{{container_name}}{{/if}}",
          "{{#if (action === 'run' && image_name)}}{{image_name}}{{/if}}",
          "{{#if port_mapping}}-p{{/if}}",
          "{{#if port_mapping}}{{port_mapping}}{{/if}}",
          "{{#each environment_vars}}-e{{/each}}",
          "{{#each environment_vars}}{{@key}}={{this}}{{/each}}",
          "{{#if follow_logs}}--follow{{/if}}"
        ]
        timeout: 120
        env:
          DOCKER_HOST: "{{env.DOCKER_HOST}}"
    hidden: true

  - name: "kubernetes_deployment"
    description: "Deploy and manage Kubernetes resources"
    inputSchema:
      type: "object"
      properties:
        action:
          type: "string"
          description: "Kubernetes action"
          enum: ["apply", "delete", "get", "describe", "logs", "scale"]
          default: "get"
        resource_type:
          type: "string"
          description: "Kubernetes resource type"
          enum: ["pods", "services", "deployments", "configmaps", "secrets"]
          default: "pods"
        resource_name:
          type: "string"
          description: "Resource name"
        namespace:
          type: "string"
          description: "Kubernetes namespace"
          default: "default"
        manifest_file:
          type: "string"
          description: "Path to manifest file (for apply/delete)"
        replicas:
          type: "integer"
          description: "Number of replicas (for scale)"
          minimum: 0
          maximum: 100
      required: ["action"]
    routing:
      type: "subprocess"
      config:
        command: "kubectl"
        args: [
          "{{action}}",
          "{{#if manifest_file}}-f{{/if}}",
          "{{#if manifest_file}}{{manifest_file}}{{/if}}",
          "{{#if (action !== 'apply' && action !== 'delete')}}{{resource_type}}{{/if}}",
          "{{#if resource_name}}{{resource_name}}{{/if}}",
          "{{#if namespace}}-n{{/if}}",
          "{{#if namespace}}{{namespace}}{{/if}}",
          "{{#if (action === 'scale')}}--replicas={{replicas}}{{/if}}"
        ]
        timeout: 180
        env:
          KUBECONFIG: "{{env.KUBECONFIG}}"
    hidden: true

  # ===== CLOUD SERVICE INTEGRATIONS =====

  - name: "aws_s3_operations"
    description: "Perform AWS S3 operations with comprehensive functionality"
    inputSchema:
      type: "object"
      properties:
        operation:
          type: "string"
          description: "S3 operation to perform"
          enum: ["list", "upload", "download", "delete", "sync", "presign"]
          default: "list"
        bucket_name:
          type: "string"
          description: "S3 bucket name"
        object_key:
          type: "string"
          description: "S3 object key/path"
        local_path:
          type: "string"
          description: "Local file path"
        expiration:
          type: "integer"
          description: "Presigned URL expiration in seconds"
          default: 3600
        storage_class:
          type: "string"
          description: "S3 storage class"
          enum: ["STANDARD", "STANDARD_IA", "GLACIER", "DEEP_ARCHIVE"]
          default: "STANDARD"
      required: ["operation", "bucket_name"]
    routing:
      type: "subprocess"
      config:
        command: "aws"
        args: [
          "s3",
          "{{operation}}",
          "{{#if (operation === 'list')}}s3://{{bucket_name}}{{/if}}",
          "{{#if (operation === 'upload')}}{{local_path}}{{/if}}",
          "{{#if (operation === 'upload')}}s3://{{bucket_name}}/{{object_key}}{{/if}}",
          "{{#if (operation === 'download')}}s3://{{bucket_name}}/{{object_key}}{{/if}}",
          "{{#if (operation === 'download')}}{{local_path}}{{/if}}",
          "{{#if (operation === 'delete')}}s3://{{bucket_name}}/{{object_key}}{{/if}}",
          "{{#if (operation === 'upload')}}--storage-class{{/if}}",
          "{{#if (operation === 'upload')}}{{storage_class}}{{/if}}"
        ]
        timeout: 300
        env:
          AWS_ACCESS_KEY_ID: "{{env.AWS_ACCESS_KEY_ID}}"
          AWS_SECRET_ACCESS_KEY: "{{env.AWS_SECRET_ACCESS_KEY}}"
          AWS_DEFAULT_REGION: "{{env.AWS_DEFAULT_REGION}}"
    hidden: true

  - name: "slack_notification"
    description: "Send notifications to Slack channels with rich formatting"
    inputSchema:
      type: "object"
      properties:
        channel:
          type: "string"
          description: "Slack channel (with # prefix)"
          default: "#general"
        message:
          type: "string"
          description: "Message text"
        username:
          type: "string"
          description: "Bot username"
          default: "magictunnel-Bot"
        icon_emoji:
          type: "string"
          description: "Bot icon emoji"
          default: ":robot_face:"
        color:
          type: "string"
          description: "Message color"
          enum: ["good", "warning", "danger", "#36a64f", "#ff0000"]
          default: "good"
        fields:
          type: "array"
          description: "Additional fields"
          items:
            type: "object"
            properties:
              title:
                type: "string"
              value:
                type: "string"
              short:
                type: "boolean"
                default: true
      required: ["message"]
    routing:
      type: "http"
      config:
        method: "POST"
        url: "{{env.SLACK_WEBHOOK_URL}}"
        headers:
          Content-Type: "application/json"
        body: |
          {
            "channel": "{{channel}}",
            "username": "{{username}}",
            "icon_emoji": "{{icon_emoji}}",
            "attachments": [
              {
                "color": "{{color}}",
                "text": "{{message}}",
                "fields": {{fields}},
                "footer": "MCP Proxy Agent Router",
                "ts": {{now}}
              }
            ]
          }
        timeout: 30
    hidden: true

  # ===== DATABASE INTEGRATIONS =====

  - name: "database_query_executor"
    description: "Execute database queries with multiple database support"
    inputSchema:
      type: "object"
      properties:
        database_type:
          type: "string"
          description: "Database type"
          enum: ["postgresql", "mysql", "sqlite", "mongodb"]
          default: "postgresql"
        query:
          type: "string"
          description: "SQL query to execute"
        connection_string:
          type: "string"
          description: "Database connection string"
        query_timeout:
          type: "integer"
          description: "Query timeout in seconds"
          default: 30
          minimum: 5
          maximum: 300
        output_format:
          type: "string"
          description: "Output format"
          enum: ["json", "csv", "table"]
          default: "json"
      required: ["query"]
    routing:
      type: "subprocess"
      config:
        command: "{{#switch database_type}}{{#case 'postgresql'}}psql{{/case}}{{#case 'mysql'}}mysql{{/case}}{{#case 'sqlite'}}sqlite3{{/case}}{{#case 'mongodb'}}mongosh{{/case}}{{/switch}}"
        args: [
          "{{#if connection_string}}{{connection_string}}{{else}}{{env.DATABASE_URL}}{{/if}}",
          "{{#if (database_type !== 'mongodb')}}-c{{/if}}",
          "{{query}}",
          "{{#if (output_format === 'csv')}}--csv{{/if}}",
          "{{#if (output_format === 'json')}}--json{{/if}}"
        ]
        timeout: "{{query_timeout}}"
        env:
          PGPASSWORD: "{{env.PGPASSWORD}}"
          MYSQL_PWD: "{{env.MYSQL_PWD}}"
    hidden: true

  # ===== MONITORING AND ALERTING =====

  - name: "prometheus_query"
    description: "Query Prometheus metrics with PromQL"
    inputSchema:
      type: "object"
      properties:
        query:
          type: "string"
          description: "PromQL query"
        prometheus_url:
          type: "string"
          description: "Prometheus server URL"
          default: "http://localhost:9090"
          format: "uri"
        time_range:
          type: "string"
          description: "Time range for query"
          default: "1h"
        step:
          type: "string"
          description: "Query resolution step"
          default: "15s"
        output_format:
          type: "string"
          description: "Output format"
          enum: ["json", "csv", "table"]
          default: "json"
      required: ["query"]
    routing:
      type: "http"
      config:
        method: "GET"
        url: "{{prometheus_url}}/api/v1/query_range"
        headers:
          Accept: "application/json"
        query_params:
          query: "{{query}}"
          start: "{{now - time_range}}"
          end: "{{now}}"
          step: "{{step}}"
        timeout: 60
    hidden: true

  - name: "grafana_dashboard_manager"
    description: "Manage Grafana dashboards and alerts"
    inputSchema:
      type: "object"
      properties:
        action:
          type: "string"
          description: "Grafana action"
          enum: ["list_dashboards", "get_dashboard", "create_dashboard", "update_dashboard", "delete_dashboard"]
          default: "list_dashboards"
        dashboard_uid:
          type: "string"
          description: "Dashboard UID"
        dashboard_json:
          type: "object"
          description: "Dashboard JSON definition"
        grafana_url:
          type: "string"
          description: "Grafana server URL"
          default: "http://localhost:3000"
          format: "uri"
        folder_id:
          type: "integer"
          description: "Folder ID for dashboard"
          default: 0
      required: ["action"]
    routing:
      type: "http"
      config:
        method: "{{#switch action}}{{#case 'list_dashboards'}}GET{{/case}}{{#case 'get_dashboard'}}GET{{/case}}{{#case 'create_dashboard'}}POST{{/case}}{{#case 'update_dashboard'}}POST{{/case}}{{#case 'delete_dashboard'}}DELETE{{/case}}{{/switch}}"
        url: "{{grafana_url}}/api/{{#switch action}}{{#case 'list_dashboards'}}search{{/case}}{{#case 'get_dashboard'}}dashboards/uid/{{dashboard_uid}}{{/case}}{{#case 'create_dashboard'}}dashboards/db{{/case}}{{#case 'update_dashboard'}}dashboards/db{{/case}}{{#case 'delete_dashboard'}}dashboards/uid/{{dashboard_uid}}{{/case}}{{/switch}}"
        headers:
          Authorization: "Bearer {{env.GRAFANA_API_KEY}}"
          Content-Type: "application/json"
        body: "{{#if dashboard_json}}{\"dashboard\": {{dashboard_json}}, \"folderId\": {{folder_id}}, \"overwrite\": true}{{/if}}"
        timeout: 30
    hidden: true

  # ===== AI/ML INTEGRATIONS =====

  - name: "openai_code_assistant"
    description: "AI-powered code assistance with OpenAI integration"
    inputSchema:
      type: "object"
      properties:
        task_type:
          type: "string"
          description: "Type of coding task"
          enum: ["code_review", "bug_fix", "optimization", "documentation", "testing"]
          default: "code_review"
        code_content:
          type: "string"
          description: "Code content to analyze"
        programming_language:
          type: "string"
          description: "Programming language"
          enum: ["python", "javascript", "typescript", "rust", "go", "java", "cpp"]
        context:
          type: "string"
          description: "Additional context or requirements"
        model:
          type: "string"
          description: "OpenAI model to use"
          enum: ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"]
          default: "gpt-4"
      required: ["code_content", "programming_language"]
    routing:
      type: "llm"
      config:
        provider: "openai"
        model: "{{model}}"
        api_key: "{{env.OPENAI_API_KEY}}"
        timeout: 120
        system_prompt: |
          You are an expert {{programming_language}} developer specializing in {{task_type}}.
          {{#if context}}Additional context: {{context}}{{/if}}
          
          Provide detailed, actionable feedback in JSON format:
          {
            "analysis": "string",
            "suggestions": [{"type": "string", "description": "string", "code_example": "string"}],
            "severity": "low|medium|high",
            "estimated_effort": "string"
          }
        user_prompt: |
          Please analyze this {{programming_language}} code for {{task_type}}:
          
          ```{{programming_language}}
          {{code_content}}
          ```
    hidden: true

  # ===== SECURITY AND COMPLIANCE =====

  - name: "security_scanner"
    description: "Run security scans on code and infrastructure"
    inputSchema:
      type: "object"
      properties:
        scan_type:
          type: "string"
          description: "Type of security scan"
          enum: ["sast", "dependency", "container", "infrastructure"]
          default: "sast"
        target_path:
          type: "string"
          description: "Path to scan"
          default: "."
        output_format:
          type: "string"
          description: "Output format"
          enum: ["json", "sarif", "table"]
          default: "json"
        severity_threshold:
          type: "string"
          description: "Minimum severity to report"
          enum: ["low", "medium", "high", "critical"]
          default: "medium"
        exclude_patterns:
          type: "array"
          description: "Patterns to exclude from scan"
          items:
            type: "string"
          default: ["node_modules", ".git", "target"]
      required: ["scan_type"]
    routing:
      type: "subprocess"
      config:
        command: "{{#switch scan_type}}{{#case 'sast'}}semgrep{{/case}}{{#case 'dependency'}}safety{{/case}}{{#case 'container'}}trivy{{/case}}{{#case 'infrastructure'}}checkov{{/case}}{{/switch}}"
        args: [
          "{{#switch scan_type}}{{#case 'sast'}}--config=auto{{/case}}{{#case 'dependency'}}check{{/case}}{{#case 'container'}}image{{/case}}{{#case 'infrastructure'}}--framework terraform{{/case}}{{/switch}}",
          "{{target_path}}",
          "--output={{output_format}}",
          "{{#each exclude_patterns}}--exclude={{this}}{{/each}}",
          "--severity={{severity_threshold}}"
        ]
        timeout: 300
    hidden: true
